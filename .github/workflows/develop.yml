name: iOS develop workflow

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  unit-tests:
    name: Unit Tests & Slather
    runs-on: macos-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Pull LFS objects
        run: git lfs pull

      - name: Run Unit Tests
        run: | 
          xcodebuild -project BitriseUnitTestSample.xcodeproj -scheme BitriseUnitTestSample -destination "platform=iOS Simulator,name=iPhone 12,OS=latest" test

      - name: Install Slather
        if: ${{ failure() }}
        run: gem install slather

      - name: Generate report
        if: ${{ failure() }}
        run: slather coverage --html --scheme BitriseUnitTestSample BitriseUnitTestSample.xcodeproj

      - name: Upload Slather report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Slather Report
          path: ./html/*

      - name: Unit Tests Success
        if: ${{ success() }}
        run: echo 'true' > test_success.txt

      - name: Unit Tests Failure
        if: ${{ failure() }}
        run: echo 'false' > test_success.txt

      - name: Upload Unit Tests Result
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Tests Result
          path: ./test_success.txt

  dependency-check:
    needs: [unit-tests]
    if: always()
    name: Dependency Check
    runs-on: macos-latest

    steps:
      - name: Download Unit Tests Result
        uses: actions/download-artifact@v2
        with:
          name: Unit Tests Result

      - name: Read Unit Tests Result
        id: unit_tests
        run: echo "::set-output name=test_success::$(<test_success.txt)"

      - name: Checkout the repository
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Pull LFS objects
        if: steps.unit_tests.outputs.test_success == 'true'
        run: git lfs pull

      - name: Install dependency-check
        if: steps.unit_tests.outputs.test_success == 'true'
        run: brew update && brew install dependency-check

      - name: dependency-check run
        if: steps.unit_tests.outputs.test_success == 'true'
        run: dependency-check --out . --scan .

      - name: Upload dependency-check report
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: Dependency Check Report
          path: dependency-check-report.html
          
  kiuwan:
    needs: [unit-tests]
    if: always()
    name: Kiuwan
    runs-on: ubuntu-latest
    
    steps:

      - name: Download Unit Tests Result
        uses: actions/download-artifact@v2
        with:
          name: Unit Tests Result

      - name: Read Unit Tests Result
        id: unit_tests
        run: echo "::set-output name=test_success::$(<test_success.txt)"

      - name: Checkout the repository
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Pull LFS objects
        if: steps.unit_tests.outputs.test_success == 'true'
        run: git lfs pull

      - name: Checkout KiuwanLocalAnalyzer
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          repository: aitoromg/kiuwan_mobility
          token: ${{ secrets.PAT }}
          path: ./

      - name: Run KiuwanLocalAnalyzer
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: ./
        with:
          softwareName: Z999999-IOS_PIPELINES_TEST
          sourcePath: ./
          user: ${{ secrets.KIUWAN_USER }}
          pass: ${{ secrets.KIUWAN_PASS }}
        continue-on-error: true

      - uses: actions/upload-artifact@v2
        if: steps.unit_tests.outputs.test_success == 'true'
        with:
          name: Kiuwan Report
          path: ./kiuwan_report.pdf
    
  sonarqube:
    needs: [unit-tests]
    if: always()
    name: SonarQube
    runs-on: ubuntu-latest
    
    steps:
    
      - name: Download Unit Tests Result
        uses: actions/download-artifact@v2
        with:
          name: Unit Tests Result

      - name: Read Unit Tests Result
        id: unit_tests
        run: echo "::set-output name=test_success::$(<test_success.txt)"

      - name: Checkout the repository
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          lfs: true
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          
      - name: Pull LFS objects
        if: steps.unit_tests.outputs.test_success == 'true'
        run: git lfs pull

      - name: SonarQube Scan
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - uses: actions/upload-artifact@v2
        if: steps.unit_tests.outputs.test_success == 'true'
        with:
          name: SonarQube Report
          path: ./sonarqube_report.pdf
          
  build_app:
    needs: [unit-tests]
    if: always()
    name: Build APP & Deploy to AppCenter
    runs-on: macos-latest
    
    steps:

      - name: Download Unit Tests Result
        uses: actions/download-artifact@v2
        with:
          name: Unit Tests Result

      - name: Read Unit Tests Result
        id: unit_tests
        run: echo "::set-output name=test_success::$(<test_success.txt)"

      - name: Checkout the repository
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Pull LFS objects
        if: steps.unit_tests.outputs.test_success == 'true'
        run: git lfs pull
        
      - name: Build APP
        if: steps.unit_tests.outputs.test_success == 'true'
        run: xcodebuild build-for-testing -project BitriseUnitTestSample.xcodeproj -scheme BitriseUnitTestSample -destination "platform=iOS Simulator,name=iPhone 12,OS=latest" test
      
      - name: Zip APP
        if: steps.unit_tests.outputs.test_success == 'true'
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: 'app.zip'
          path: '/Users/runner/Library/Developer/Xcode/DerivedData/*/Build/Products/Debug-iphonesimulator/*.app'

      - name: Deploy to AppCenter
        if: steps.unit_tests.outputs.test_success == 'true'
        run: | 
          appcenter distribute release -f ./*.zip -g Collaborators --app SGT-Movilidad-COEX/Test_iOS_GitHubActions --build-version ${{ github.run_number }} --release-notes '${{ github.event.commits[0].message }}' --token ${{ secrets.APPCENTER_API_TOKEN }}
          appcenter crashes upload-symbols -s /Users/runner/Library/Developer/Xcode/DerivedData/*/Build/Products/Debug-iphonesimulator/*.app.dSYM --app SGT-Movilidad-COEX/Test_iOS_GitHubActions --token ${{ secrets.APPCENTER_API_TOKEN }}
