name: iOS release workflow

on:
  push:
    branches: [release]
  pull_request:
    branches: [release]

jobs:
  unit-tests:
    name: Unit Tests & Slather
    runs-on: macos-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Pull LFS objects
        run: git lfs pull

      - name: Run Unit Tests
        run: xcodebuild -project BitriseUnitTestSample.xcodeproj -scheme BitriseUnitTestSample -destination "platform=iOS Simulator,name=iPhone 12,OS=latest" clean test | xcpretty

      - name: Install Slather
        if: ${{ failure() }}
        run: gem install slather

      - name: Generate report
        if: ${{ failure() }}
        run: slather coverage --html --scheme BitriseUnitTestSample BitriseUnitTestSample.xcodeproj

      - name: Upload Slather report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Slather Report
          path: ./html/*

      - name: Unit Tests Success
        if: ${{ success() }}
        run: echo 'true' > test_success.txt

      - name: Unit Tests Failure
        if: ${{ failure() }}
        run: echo 'false' > test_success.txt

      - name: Upload Unit Tests Result
        uses: actions/upload-artifact@v2
        with:
          name: Unit Tests Result
          path: ./test_success.txt

  dependency-check:
    needs: [unit-tests]
    if: always()
    name: Dependency Check
    runs-on: macos-latest

    steps:
      - name: Download Unit Tests Result
        uses: actions/download-artifact@v2
        with:
          name: Unit Tests Result

      - name: Read Unit Tests Result
        id: set_output
        run: echo "::set-output name=test_success::$(<test_success.txt)"

      - name: Checkout the repository
        if: steps.set_output.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Pull LFS objects
        if: steps.set_output.outputs.test_success == 'true'
        run: git lfs pull

      - name: Install dependency-check
        if: steps.set_output.outputs.test_success == 'true'
        run: brew update && brew install dependency-check

      - name: dependency-check run
        if: steps.set_output.outputs.test_success == 'true'
        run: dependency-check --out . --scan .

      - name: Upload dependency-check report
        if: steps.set_output.outputs.test_success == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: Dependency Check Report
          path: dependency-check-report.html
          
  kiuwan:
    needs: [unit-tests]
    if: always()
    name: Kiuwan
    runs-on: ubuntu-latest
    
    steps:

      - name: Download Unit Tests Result
        uses: actions/download-artifact@v2
        with:
          name: Unit Tests Result

      - name: Read Unit Tests Result
        id: set_output
        run: echo "::set-output name=test_success::$(<test_success.txt)"

      - name: Checkout the repository
        if: steps.set_output.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Pull LFS objects
        if: steps.set_output.outputs.test_success == 'true'
        run: git lfs pull

      - name: Checkout KiuwanLocalAnalyzer
        if: steps.set_output.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          repository: aitoromg/kiuwan_mobility
          token: ${{ secrets.PAT }}
          path: ./

      - name: Run KiuwanLocalAnalyzer
        if: steps.set_output.outputs.test_success == 'true'
        uses: ./
        with:
          softwareName: gsc:sgt:sd-purchase-experience:ios-ci
          sourcePath: ./
          user: ${{ secrets.KIUWAN_USER }}
          pass: ${{ secrets.KIUWAN_PASS }}
        continue-on-error: true

      - uses: actions/upload-artifact@v2
        if: steps.set_output.outputs.test_success == 'true'
        with:
          name: Kiuwan Report
          path: ./kiuwan_report.pdf
          
  build_ipa:
    needs: [unit-tests]
    if: always()
    name: Build IPA & Deploy to AppCenter
    runs-on: macos-latest
    
    steps:

      - name: Download Unit Tests Result
        uses: actions/download-artifact@v2
        with:
          name: Unit Tests Result

      - name: Read Unit Tests Result
        id: set_output
        run: echo "::set-output name=test_success::$(<test_success.txt)"

      - name: Checkout the repository
        if: steps.set_output.outputs.test_success == 'true'
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Pull LFS objects
        if: steps.set_output.outputs.test_success == 'true'
        run: git lfs pull
        
      - name: Add SSH key
        if: steps.set_output.outputs.test_success == 'true'
        run: |
          mkdir -p ssh
          echo  "${{ secrets.CI_SSH_KEY }}" > ssh/private.key
          sudo chmod 600 ssh/private.key
        shell: bash
        
      - name: Get certificates and provisioning profile
        if: steps.set_output.outputs.test_success == 'true'
        run: fastlane match development --readonly --verbose --generate_apple_certs false --git_private_key "ssh/private.key" --app_identifier "com.isban.bancosantander.BitriseUnitTestSample"
        #    fastlane match enterprise --readonly --verbose --generate_apple_certs false --git_private_key "ssh/private.key" --app_identifier "com.isban.bancosantander.BitriseUnitTestSample"
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          
      - name: See the provisioning profile installed
        if: steps.set_output.outputs.test_success == 'true'
        run: | 
          security find-identity -v -p codesigning
          fastlane sigh manage
        shell: bash
        
      - name: Build IPA
        if: steps.set_output.outputs.test_success == 'true'
        run: fastlane buildFireflyWithOptions git_head:"##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})" addCommitHashToIpa:true build_dev:true 
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          
      - name: Deploy to AppCenter
        if: steps.set_output.outputs.test_success == 'true'
        run: | 
          appcenter distribute release -f builds/ipa/*.ipa -g Collaborators --app SGT-Movilidad-COEX/Test_iOS_GitHubActions --release-notes "${{ github.event.commits[0].message }}" --token ${{ secrets.APPCENTER_API_TOKEN }}
          appcenter crashes upload-symbols -s builds/ipa/*.app.dSYM --app SGT-Movilidad-COEX/Test_iOS_GitHubActions --token ${{ secrets.APPCENTER_API_TOKEN }}
